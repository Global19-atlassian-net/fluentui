resources:
  repositories:
    - repository: self
      type: git
      ref: master

variables:
  - group: 'Github and NPM secrets'
  - name: version
    value: 0.52.1-beta.1
  - name: tag
    value: beta
  - name: docsiteVersion
    value: empty
  - name: deployBasePath
    value: empty
  - name: officialRelease
    value: 1
  - name: publishToNPM
    value: true
  - name: publishDocsite
    value: false
  - name: approvers
    value: |
      yuanboxue@microsoft.com
  - name: dryRun # stop before publish
    value: true

jobs:
  - job: Job_1
    displayName: Validation
    pool:
      name: Self Host Ubuntu

    steps:
      - checkout: self

      - task: CmdLine@2
        displayName: Validate Version & Tag
        inputs:
          script: >-
            echo version $(version) tag $(tag)

            if [[ "$(tag)" == "latest" ]]

            then
              if [[ "$(version)" != "minor" && "$(version)" != "patch" ]]
              then
                echo "Error: version can only be 'minor' or 'patch' when using the 'latest' tag"
                exit 1
              fi
            fi

      - task: CmdLine@2
        displayName: Authenticate Git credentials
        inputs:
          script: >-
            git config user.name "Fluent UI Build"

            git config user.email "fluentui-internal@service.microsoft.com"

            git remote set-url origin https://$(githubUser):$(githubPAT)@github.com/microsoft/fluentui.git

      - task: CmdLine@2
        displayName: Checkout branch
        inputs:
          script: >-
            git checkout $(Build.SourceBranchName)

            git pull

      - task: NodeTool@0
        displayName: Install Node.js
        inputs:
          versionSpec: 12.x

      - task: YarnInstaller@2
        displayName: Use Yarn 1.19.x
        inputs:
          versionSpec: 1.19.x
          checkLatest: true

      - task: Bash@3
        displayName: Yarn
        inputs:
          filePath: yarn-ci.sh

      - task: CmdLine@2
        displayName: Display new version
        inputs:
          script: >-
            if [[ "$(tag)" == "latest" ]]

            then
              if [[ "$(version)" == "minor" ]]
              then
                RELEASE_COMMAND="yarn release:fluentui:minor"
              elif [[ "$(version)" == "patch" ]]
              then
                RELEASE_COMMAND="yarn release:fluentui:patch"
              fi

            else
              RELEASE_COMMAND="yarn release:fluentui:custom $(version) --dist-tag $(tag)"
            fi


            echo "##vso[task.setvariable variable=RELEASE_COMMAND]$RELEASE_COMMAND"

            printf 'n\n' | eval "$RELEASE_COMMAND"

  - job: Job_2
    displayName: Manual Approval
    dependsOn: Job_1
    pool: server

    steps:
      - task: ManualValidation@0
        timeoutInMinutes: 1440 # task times out in 1 day
        displayName: Manual Validation
        inputs:
          notifyUsers: $(approvers)
          instructions: Please validate the version in the previous job

  - job: Job_3
    displayName: Build and Release
    dependsOn:
      - Job_1
      - Job_2
    condition: eq(variables.publishToNPM, true)
    pool:
      name: Self Host Ubuntu

    steps:
      - checkout: self

      - task: CmdLine@2
        displayName: Authenticate Git credentials
        inputs:
          script: >-
            git config user.name "Fluent UI Build"

            git config user.email "fluentui-internal@service.microsoft.com"

            git remote set-url origin https://$(githubUser):$(githubPAT)@github.com/microsoft/fluentui.git

      - task: CmdLine@2
        displayName: Checkout branch
        inputs:
          script: >-
            git checkout $(Build.SourceBranchName)

            git pull

      - task: NodeTool@0
        displayName: Install Node.js
        inputs:
          versionSpec: 12.x

      - task: YarnInstaller@2
        displayName: Use Yarn 1.19.x
        inputs:
          versionSpec: 1.19.x
          checkLatest: true

      - task: Bash@3
        displayName: Yarn
        inputs:
          filePath: yarn-ci.sh

      - task: CmdLine@2
        displayName: yarn buildci
        inputs:
          script: yarn buildci

      - task: CmdLine@2
        displayName: Authenticate with Registry
        inputs:
          script: >-
            yarn logout

            touch packages/fluentui/.npmrc

            echo "@fluentui:registry=http://registry.npmjs.org/" > packages/fluentui/.npmrc
            echo "registry=http://registry.npmjs.org/" >> packages/fluentui/.npmrc
            echo //registry.npmjs.org/:_authToken=$(npmToken) >> packages/fluentui/.npmrc

      - task: CmdLine@2
        displayName: Display new version
        inputs:
          script: >-
            if [[ "$(tag)" == "latest" ]]

            then
              if [[ "$(version)" == "minor" ]]
              then
                RELEASE_COMMAND="yarn release:fluentui:minor"
              elif [[ "$(version)" == "patch" ]]
              then
                RELEASE_COMMAND="yarn release:fluentui:patch"
              fi

            else
              RELEASE_COMMAND="yarn release:fluentui:custom $(version) --dist-tag $(tag)"
            fi


            echo "##vso[task.setvariable variable=RELEASE_COMMAND]$RELEASE_COMMAND"

            printf 'n\n' | eval "$RELEASE_COMMAND"

      - task: CmdLine@2
        displayName: Stop before publish
        timeoutInMinutes: 2
        inputs:
          script: >-
            if [[ "$(dryRun)" == true ]]

            then
              exit 1
            fi
          failOnStderr: true

      - task: CmdLine@2
        displayName: Publish
        timeoutInMinutes: 2
        inputs:
          script: >-
            echo $RELEASE_COMMAND

            eval "$RELEASE_COMMAND --yes"

      - task: CmdLine@2
        displayName: Post publish Validation
        inputs:
          script: yarn release:fluentui:post-validation

  - job: Job_4
    displayName: Publish Docsite
    dependsOn:
      - Job_1
      - Job_2
      - Job_3
    condition: or(succeeded(), eq(variables.publishDocsite, true))
    pool:
      name: Self Host Ubuntu

    steps:
      - checkout: self

      - task: CmdLine@2
        displayName: Authenticate Git credentials
        inputs:
          script: >-
            git config user.name "Fluent UI Build"

            git config user.email "fluentui-internal@service.microsoft.com"

            git remote set-url origin https://$(githubUser):$(githubPAT)@github.com/microsoft/fluentui.git

      - task: NodeTool@0
        displayName: Install Node.js
        inputs:
          versionSpec: 12.x

      - task: YarnInstaller@2
        displayName: Use Yarn 1.19.x
        inputs:
          versionSpec: 1.19.x
          checkLatest: true

      - task: Bash@3
        displayName: Yarn
        inputs:
          filePath: yarn-ci.sh

      - task: CmdLine@2
        displayName: Set base path and version variables
        inputs:
          script: >-
            ver=`node -p "require('./packages/fluentui/react-northstar/package.json').version"`

            echo "Docsite base path published for version $ver"

            echo "##vso[task.setvariable variable=deployBasePath]$ver"

            echo "##vso[task.setvariable variable=docsiteVersion]$ver"

      - task: CmdLine@2
        displayName: Build
        inputs:
          script: >-
            echo deployBasePath $(deployBasePath) docsiteVersion $(docsiteVersion)

            PRODUCTION=true yarn build

            NODE_ENV=production yarn build:fluentui:docs

      - task: PublishPipelineArtifact@1
        displayName: Publish as pipeline artifact
        inputs:
          path: packages/fluentui/docs/dist
          artifactName: docsite_v$(docsiteVersion)

      - task: AzureUpload@2
        displayName: 'Upload to Azure '
        inputs:
          SourcePath: packages/fluentui/docs/dist
          ConnectedServiceNameARM: 4f791194-9458-4a18-9f9d-6a77ddb74b8c
          StorageAccountRM: fluentsite
          ContainerName: $web
          BlobPrefix: $(deployBasePath)
